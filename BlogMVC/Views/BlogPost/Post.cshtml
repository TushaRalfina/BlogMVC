@model BlogMVC.Models.ViewModels.PostViewModel

@{
    ViewBag.Title = "Post";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var groupedFiles = Model.Post.files.GroupBy(f => f.file_name);
    var groupedImages = Model.Post.files.GroupBy(f => f.body_images);

}


<!-- # site-content
================================================== -->
<div id="content" class="s-content s-content--blog">

    <div class="row entry-wrap">
        <div class="column lg-12">

            <article class="entry format-standard">

                <header class="entry__header">

                    <h1 class="entry__title">
                        @Model.Post.title
                    </h1>

                    <div class="entry__meta">
                        <div class="entry__meta-author">
                            <svg width="24" height="24" fill="none" viewBox="0 0 24 24">
                                <circle cx="12" cy="8" r="3.25" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"></circle>
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M6.8475 19.25H17.1525C18.2944 19.25 19.174 18.2681 18.6408 17.2584C17.8563 15.7731 16.068 14 12 14C7.93201 14 6.14367 15.7731 5.35924 17.2584C4.82597 18.2681 5.70558 19.25 6.8475 19.25Z"></path>
                            </svg>
                            <a href="#">@Model.Post.user.username</a>
                        </div>
                        <div class="entry__meta-date">
                            <svg width="24" height="24" fill="none" viewBox="0 0 24 24">
                                <circle cx="12" cy="12" r="7.25" stroke="currentColor" stroke-width="1.5"></circle>
                                <path stroke="currentColor" stroke-width="1.5" d="M12 8V12L14 14"></path>
                            </svg>
                            @Model.Post.created_at

                        </div>
                        <div class="entry__meta-cat">
                            <svg width="24" height="24" fill="none" viewBox="0 0 24 24">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M19.25 17.25V9.75C19.25 8.64543 18.3546 7.75 17.25 7.75H4.75V17.25C4.75 18.3546 5.64543 19.25 6.75 19.25H17.25C18.3546 19.25 19.25 18.3546 19.25 17.25Z"></path>
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M13.5 7.5L12.5685 5.7923C12.2181 5.14977 11.5446 4.75 10.8127 4.75H6.75C5.64543 4.75 4.75 5.64543 4.75 6.75V11"></path>
                            </svg>

                            @foreach (var postCategory in Model.Post.PostCategories)
                            {
                                <span class="cat-links">
                                    <a href="#">@postCategory.category.name</a>
                                </span>
                            }
                        </div>
                    </div>
                </header>
                <div class="entry__media">
                    <figure class="featured-image">
                        <img src="@Model.Post.main_image"
                             style="vertical-align: bottom; margin-bottom: 0; position: relative; width: 100%;  "
                             sizes="(max-width: 2400px) 100vw, 2400px" alt="">
                    </figure>
                </div>

                <div class="content-primary">

                    <div class="entry__content">
                        <p class="lead">
                            @Html.Raw(Model.Post.content)
                        </p>


                        <h4>Blog Post Images:</h4>
                        @foreach (var group in groupedImages)
                        {
                            var file = group.First();
                            <img src="@file.body_images" alt="">

                        }


                        <h4>Attached Files:</h4>
                        @foreach (var group in groupedFiles)
                        {
                            var file = group.First();
                            <span class="file-link">
                                <a href="@Url.Action("DownloadFile", "Home", new { fileId = file.id })">
                                    <i class="fas fa-file-alt"></i> @file.file_name
                                </a>
                            </span>
                        }



                        <div class="entry__author-box">
                            <figure class="entry__author-avatar">
                                <img alt="" src="/Content/images/avatars/default.png" class="avatar">
                            </figure>
                            <div class="entry__author-info">
                                <h5 class="entry__author-name">
                                    <a href="#0">
                                        @Model.Post.user.username
                                    </a>
                                </h5>
                                <p>
                                    @Model.Post.user.bio
                                </p>
                            </div>
                        </div>

                    </div> <!-- end entry-content -->


                </div> <!-- end content-primary -->

            </article> <!-- end entry -->
            @if (Session["role"] != null && Session["role"].ToString() == "admin")
            {
                <div class="admin-buttons">
                    <form action="@Url.Action("ApprovePost", "Admin", new { id = Model.Post.id })" method="post">
                        <button type="submit" class="btn btn-success">Approve Post</button>
                    </form>
                    <form action="@Url.Action("DeletePost", "Admin", new {id = Model.Post.id })" method="post">
                        <button type="submit" class="btn btn-danger">Reject Post</button>
                    </form>
                </div>
                <style>
                    .admin-buttons {
                        display: flex;  
                        gap: 10px; 
                    }

                    .inline-form {
                        display: inline;  
                        margin: 0;  
                    }

                    .btn-success {
                        background-color: forestgreen;
                    }

                    .btn-danger {
                        background-color: darkred;
                    }
                </style>

            }

            <div class="comment-respond">
                <div id="respond">
                    <h3>
                        Add Comment
                    </h3>

                    <form name="contactForm" id="commentForm" method="post" action="" autocomplete="off" data-post-id="@Model.Post.id">
                        <fieldset class="row">
                            <input type="hidden" id="post_id" name="post_id" value="@Model.Post.id" />


                            <div class="column lg-12 message form-field">
                                <textarea name="comment" id="comment" class="u-fullwidth" placeholder="Your Message"></textarea>
                            </div>

                            <div class="column lg-12">
                                <input name="submit" id="submit" class="btn btn--primary btn-wide btn--large u-fullwidth" value="Add Comment" type="submit">
                            </div>
                        </fieldset>
                    </form>
                </div>
            </div>



            <div id="commentsContainer">

                <h2>Comments of this post</h2>

                @foreach (var comment in Model.ApprovedComments)
                {


                    <ol class="commentlist">
                        <li class="depth-1 comment">

                            <div class="comment__avatar">
                                <img class="avatar" src="/Content/images/avatars/default.png" alt="" width="50" height="50">
                            </div>

                            <div class="comment__content">

                                <div class="comment__info">
                                    <div class="comment__author">@comment.user.username</div>

                                    <div class="comment__meta">
                                        <div class="comment__time">@comment.created_at</div>

                                    </div>
                                </div>

                                <div class="comment__text">
                                    <p>
                                        @comment.comment1
                                    </p>
                                </div>
                                @if (Session["role"].ToString() == "admin" || Session["username"].ToString() == comment.user.username.ToString())
                                {
                                    <form action="@Url.Action("FshiComment", "Admin", new {id = comment.id})" method="post">
                                        <button type="submit" class="btn btn-danger">Delete comment</button>
                                    </form>
                                }


                            </div>

                        </li> <!-- end comment level 1 -->
                    </ol>
                }





            </div>
        </div>

        </div> <!-- end content -->
    @section Scripts {
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        <script>
        $(document).ready(function() {
            $('#commentForm').on('submit', function(event) {
                event.preventDefault();
                var postId = $('#post_id').val();
                var comment = $('#comment').val();

                $.ajax({
                    url: '@Url.Action("AddComment", "BlogPost")',
                    type: 'POST',
                    data: {
                        post_id: postId,
                        comment: comment
                    },
                    success: function(response) {
                        if (response.success) {

                            alert('Comment added successfully!');
                            
                        } else {
                            alert('Error adding comment.');
                        }
                    },
                    error: function() {
                        alert('Error adding comment.');
                    }
                });
            });
        });
        </script>
    }

























    <!--
    <script>
        $(document).ready(function () {
            $('#commentForm').submit(function (e) {
                e.preventDefault();

                var comment1 = $('#comment').val();
                var post_id = $('#post_id').val();

                $.ajax({
                    url: '/BlogPost/AddComment',
                    type: 'POST',
                    data: {
                        id: post_id,
                        comment1: comment1
                    },
                    success: function (response) {
                        if (response.success) {
                            alert('Comment added successfully!');

                             $('#comment').val('');

                             var commentsHtml = '';
                            $.each(response.comments, function (index, comment) {
                                commentsHtml += '<div class="comment">';
                                commentsHtml += '<p>' + comment.comment1 + '</p>';
                                commentsHtml += '<p><small>' + comment.user.username + ' on ' + comment.created_at + '</small></p>';
                                commentsHtml += '</div>';
                            });
                            $('#commentsContainer').html(commentsHtml);
                        } else {
                            alert('Error: ' + response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        alert('An error occurred while adding the comment: ' + error);
                    }
                });
            });
        });

    </script>end entry-wrap -->





